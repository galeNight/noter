class hotdog = constroctor
{
  public = access modifier   hotdog = classname   () = input parameter
  {
    accessmodifier returtype 
  }
}

class m√• have 1 til 2 constrostor 
returtyper 1
parameter retunerre 1

ehnum = tal string
(int) = Implicit 
Implicit indirect/automatically
explicit = direct/manually
int = integer(hole num)
double = floating (point num)
char = charactor (single char fx A)
bool = boolean (true/false)
string = string (text)
covariance = Enables you to use a more derived type than originally specified. (You can assign an instance of IEnumerable<Derived> to a variable of type IEnumerable<Base>.)
contravariance = Enables you to use a more generic (less derived) type than originally specified. (You can assign an instance of Action<Base> to a variable of type Action<Derived>.)
invariance = Means that you can use only the type originally specified. An invariant generic type parameter is neither covariant nor contravariant. (You cannot assign an instance of List<Base> to a variable of type List<Derived> or vice versa.)

