class hotdog = constroctor
{
  public = access modifier   hotdog = classname   () = input parameter
  {
    accessmodifier returtype 
  }
}

class må have 1 til 2 constrostor 
returtyper 1
parameter retunerre 1

returtyper = void, int, doble, string

(i = i+1) (i + = i) = kan endres manualt
condotion = true/false
ehnum = tal string
(int) = Implicit 
Implicit indirect/automatically (antager)
explicit = direct/manually
int = integer(hole num)
double = floating (comma num) fills more
float = floating (comma num) fills less
char = charactor (single char fx A) need to be ind this ''
bool = boolean (true/false)
string = string (text)
void = returtype
covariance = Enables you to use a more derived type than originally specified. (You can assign an instance of IEnumerable<Derived> to a variable of type IEnumerable<Base>.)
contravariance = Enables you to use a more generic (less derived) type than originally specified. (You can assign an instance of Action<Base> to a variable of type Action<Derived>.)
invariance = Means that you can use only the type originally specified. An invariant generic type parameter is neither covariant nor contravariant. (You cannot assign an instance of List<Base> to a variable of type List<Derived> or vice versa.)
collection = all lists and arrays
char = only display one character
initializer = declare and set values must be both
condision = do this if true 
iterator = is a collection 
instantiation = the process of creating a object
stack = static
heap = dynamick m
Implicit = indirect/automatically
explicit = direct/manually
Encapsulation = hide details from others. support the following access modifiers public, private, protected, internal, protected internal.
accessors = get set from Encapsulation
konstructor = instanstiere et object
property = is when you have a {get;set;} need to be placed in the class section of the code
field = when you dont have {get;set;} and can only be placed in the class section of the code
this = looks to local field
inject = blazers sammnlining med using
this = takes fields datatype and use them
continue = use to to skip somthing and then continue the loop
Destructors = is ~ with the class name fx class book ~book, ~ <---Destructor
Interfaces = completly abstract class with only abstract members
public string navn = field
public string navn {get;set;} = property
public person(){} = konstructor
public void getPerson(){} = methode

index in a array idicate the numbers fx [0] <-- this is a index in a array
array is a refernce type
destructor has the same name as the class with a ~ infornt and is invocet when a object is deleted
Math.pi is static 
static class can only static members
object of a class are stored on the heap
after each iteration loop iterator
operator is use to minimize the amount of written code and make a methode to look like a math equation
methodes if no accemodifier defult to private in virsual studio
nested class is when a class is in another class

constrotor
første accesmodifire
andet referencetype
tredje parameter
fjere inputparameter
femte {}

metode
first accesmodifire
andet returtype
trejde navn
fjere ()
fjemte inputbarameter
sjete {}

aray er en bool

() input parameter er data typerne fx string, int, double o.s.v
fild liger i constroctor som er prive, public o.v.s
_ viser at den tilhøre constrostorens 
.length gør string til int


tal operator tegn og forklaring:
() i rejnestyk = giver pioitet ved urejning 
+ = plus
- = minus
* = gange
/ = division
% = rest (moduis retunere resten ved en didition)
+= = adder og tildeler værdien af en variable med en verdi
-= subtrahere og tildeler værdien af en variable med en verdi
*= = multiplicere og tildeler værdien af en variable med en verdi
/= dividerer og tildeler værdien af en variable med en verdi
%= 
somting++ = forøger en variable med en(postincrioments)
somting-- = forminsker en variable med en(postdecromens)
++somting = forøger en variable med en(preincroment
--somthing = forminsker en variable med en(predecroments)

logisk operator tegn og forklaring: (boolin)
== = lig med 
!= = forskellige fra
&& = and (og) begge værdier skal være sande for at retunere sand
|| = Or (eller) kun en værdi skal være sand for at retunere sand
> = større end 
< = mindre end
>= = større end eller lig med
> = mindre en eller lig med 



javacript === sameliner datatyper og indholder er ens


konstructor kan ikke have returtype kun metoder/ kan


loops:
loop can run a block of code as long a specified condition is reached. loops are handy becouse the can save time,reduse errors, and make code more readable

nested loop is for when the need for a loop to run multiple times by another loop which is done by a outerloob and a innerloop 
nested loop work by the innner loop wil run one time for each iteration of the outher loop
nested loop ex:
for(int i = 1; i <= 2; ++i){
  console.writeline("outer: " + i);
  for(int j = 1; j <= 3; j++) runs 2 times{
    console.writeline("inner: " j++) runs 6 times(2*3;
  }
}

for(initializer ; condition; iterator){
  code block
  for(initializer; condition; iterator){
    code block 
  }
}

for loop is for when an specific number of time the loop need to run.
statment 1 is executed(one time)before the execution of the code block
statment 2 defines the condition for executing the code block
statmet 3 is executed(every time) after the code block has been executed
for loop ex:
for(int i = 0; i < 5; i++){console.writeline(i)}
for(initializer; condision; iterator){code block}

while loop is for to run through a block of code when conditions is true 
while loop ex:
int i = 0
while(i < 5)
{
   console.writeline(i) 
   i++;
}

datatype
while(condition)
{
  code block
}

do/while loop is for running the loop at least ones and then contune running the loop when condition is true. and is a variant of the while loop
do/while loop ex
int i = 0
do
{
  console.writeline(i);
  i++;
}
while(i < 5);

datatype
do
{
  code block
}
while(condition);

foreach loop is for running through each element in a collection 
foreach loop ex
string [] cars = {"Volvo", "BMW", "Ford", "Mazda"};
foreach(string i in cars)
{
  console.writeline(i);
}
string(datatype) [array indicator] arrayname {data}
foreach(type varibalename in arryname){code block}
