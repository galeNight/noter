class hotdog = constroctor
{
  public = access modifier   hotdog = classname   () = input parameter
  {
    accessmodifier returtype 
  }
}

class må have 1 til 2 constrostor 
returtyper 1
parameter retunerre 1

returtyper = void, int, doble, string

ehnum = tal string
(int) = Implicit 
Implicit indirect/automatically
explicit = direct/manually
int = integer(hole num)
double = floating (point num)
char = charactor (single char fx A)
bool = boolean (true/false)
string = string (text)
void = returtype
covariance = Enables you to use a more derived type than originally specified. (You can assign an instance of IEnumerable<Derived> to a variable of type IEnumerable<Base>.)
contravariance = Enables you to use a more generic (less derived) type than originally specified. (You can assign an instance of Action<Base> to a variable of type Action<Derived>.)
invariance = Means that you can use only the type originally specified. An invariant generic type parameter is neither covariant nor contravariant. (You cannot assign an instance of List<Base> to a variable of type List<Derived> or vice versa.)


Implicit indirect/automatically
explicit = direct/manually

constrotor
første accesmodifire
andet referencetype
tredje parameter
fjere inputparameter
femte {}

metode
first accesmodifire
andet returtype
trejde navn
fjere ()
fjemte inputbarameter
sjete {}

aray er en bool

() input parameter er data typerne fx string, int, double o.s.v
fild liger i constroctor som er prive, public o.v.s
_ viser at den tilhøre constrostorens 
.length gør string til int


tal operator tegn og forklaring:
+ = plus
- = minus
* = gange
/ = division
% = modulud retunere resten ved en didition
+= = addere og tildeler værdien af en variable med en verdi
-= subtrahere og tildeler værdien af en variable med en verdi
*= = multiplicere og tildeler værdien af en variable med en verdi
/= dividerer og tildeler værdien af en variable med en verdi
++ = forøger en variable med en
-- = forminsker en variable med en

logisk operator tegn og forklaring: (boolin)
== = lig med 
!= = forskellige fra
&& = and (og) begge værdier skal være sande for at retunere sand
|| = Or (eller) kun en værdi skal være sand for at retunere sand
> = større end 
< = mindre end
>= = større end eller lig med
>0 = mindre en eller lig med 



javacript === sameliner datatyper og indholder er ens


konstructor kan ikke have returtype kun metoder/ kan
